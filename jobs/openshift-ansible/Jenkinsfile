// Build the OpenShift Ansible RPM

@Library('artlib')

import com.redhat.art.*

properties(
    [
        buildDiscarder(
            logRotator(
                artifactDaysToKeepStr: '',
                artifactNumToKeepStr: '',
                daysToKeepStr: '',
                numToKeepStr: '10'
            )
        ),
        [
            $class: 'ParametersDefinitionProperty',
            parameterDefinitions: [
                [
                    name: 'TARGET_NODE',
                    description: 'Jenkins agent node',
                    $class: 'hudson.model.StringParameterDefinition',
                    defaultValue: 'container'
                ],
                [
                    name: 'GITHUB_OWNER',
                    description: 'Github project owner for repos',
                    $class: 'hudson.model.ChoiceParameterDefinition',
                    choices: [
                        "openshift",
                        "markllama"
                    ].join("\n"),
                    defaultValue: 'openshift'
                ],
                [
                    name: 'SSH_KEY_ID',
                    description: 'SSH credential id to use',
                    $class: 'hudson.model.ChoiceParameterDefinition',
                    choices: [
                        "openshift-bot",
                        "markllama-aos-cd-bot",
                        "markllama"
                    ].join("\n"),
                    defaultValue: 'markllama'
                ],
                [
                    name: 'BUILD_VERSION',
                    description: 'OCP Version to build',
                    $class: 'hudson.model.StringParameterDefinition',
                    defaultValue: 'master'
                ],
                [
                    name: 'RELEASE',
                    description: 'build local or release',
                    $class: 'hudson.model.BooleanParameterDefinition',
                    defaultValue: false
                ],
                [
                    name: 'SCRATCH',
                    description: 'build an unofficial release',
                    $class: 'hudson.model.BooleanParameterDefinition',
                    defaultValue: true
                ],
                [
                    name: 'DEBUG',
                    description: 'ask commands to print details',
                    $class: 'hudson.model.BooleanParameterDefinition',
                    defaultValue: false
                ],
                [
                    name: 'MOCK',
                    description: 'dont do anything if true',
                    $class: 'hudson.model.BooleanParameterDefinition',
                    defaultValue: false
                ],
            ]
        ],
        disableConcurrentBuilds()
    ]
)

// convert property strings to proper logical values
release = RELEASE.toBoolean()
scratch = SCRATCH.toBoolean()
mock = MOCK.toBoolean()
debug = DEBUG.toBoolean()

// ===========================================================================
//
//
//
// ===========================================================================
node(TARGET_NODE) {

    if (mock == true) {
        error "MOCK: just download new copy of pipeline code"
    }

    sh "rm -rf openshift-ansible"

    checkout scm

    // get the list of release numbers from the branch names
    package_name = "openshift-ansible"
    branch_prefix = "release-"
    brew_task_url_prefix = 'https://brewweb.engineering.redhat.com/brew/taskinfo?taskI='

    package_repo = new GitHubRepository(
        [
            owner: GITHUB_OWNER,
            project: package_name,
            path: package_name,
            pipeline: this,
        ]
    )

    sshagent([SSH_KEY_ID]) {
        releases = package_repo.releases(branch_prefix)
    }
    
    // select the branch to build
    def branch_name
    if (BUILD_VERSION in ['master', 'stage']) {
        branch_name = BUILD_VERSION
    } else if (releases.find { it == BUILD_VERSION } != -1) {
        branch_name = branch_prefix + BUILD_VERSION
    } else {
        error "invalid build version ${BUILD_VERSION}"
    }
    package_repo.branch = branch_name
    
    if (debug) {
        echo "build_version: ${BUILD_VERSION}, branch_name: ${branch_name}"
    }

    rpm = new Rpm([
            repo: package_repo,
            pipeline: this
        ]
    )
    
    sshagent([SSH_KEY_ID]) {
        stage("clone ${package_name}") {
            echo "cloning to ${package_name}"
            package_repo.clone()
            echo "cloning complete"
            
        }

        // need new version and new release
        stage("update build/release numbers") {
            spec = rpm.spec
            
            def spec_file = package_repo.specpath
            echo "looking up spec_file: ${spec_file}"
            def rpm_spec = new RpmSpec(readFile(spec_file))
            current_version = rpm_spec.version
            current_release = rpm_spec.release

            def cv = new Version(current_version)
            def cr = new Version(current_release)

            echo "current RPM id: ${current_version}-${current_release}"

            // release builds increment the revision and leave the build
            // number at 1.  Dunno why
            //cv.incrRevision()
            def nv = new Version(cv)
            def nr = cr.incrMajor()

            rpm_spec.version = nv as String
            rpm_spec.release = nr as String

            new_version = rpm_spec.version
            new_release = rpm_spec.release

            echo "new RPM id: ${new_version}-${new_release}"
            
            //writeFile file: spec_path, text: rpm_spec.body

            //sh "git tag ${new_version}-${new_release}"
        }

        stage("tag and push") {
            echo "tag and push"
            echo "tagging RPM id: ${new_version}-${new_release}"            
            rpm.tag(
                version: new_version,
                release: new_release,
                debug: debug
            )
        }

        stage("build") {
            rpm.build(
                destination: env.WORKSPACE + "/BUILD",
                debug: debug
            )
        }
    }

    archiveArtifacts allowEmptyArchive: true, artifacts: "BUILD/**"
}
