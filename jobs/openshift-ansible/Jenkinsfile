// Build the OpenShift Ansible RPM

@Library('artlib')

import com.redhat.art.*

properties(
    [
        buildDiscarder(
            logRotator(
                artifactDaysToKeepStr: '',
                artifactNumToKeepStr: '',
                daysToKeepStr: '5',
                numToKeepStr: '5'
            )
        ),
        [
            $class: 'ParametersDefinitionProperty',
            parameterDefinitions: [
                [
                    name: 'TARGET_NODE',
                    description: 'Jenkins agent node',
                    $class: 'hudson.model.StringParameterDefinition',
                    defaultValue: 'container'
                ],
                [
                    name: 'GITHUB_OWNER',
                    description: 'Github project owner for repos',
                    $class: 'hudson.model.ChoiceParameterDefinition',
                    choices: [
                        "openshift",
                        "markllama"
                    ].join("\n"),
                    defaultValue: 'openshift'
                ],
                [
                    name: 'SSH_KEY_ID',
                    description: 'SSH credential id to use',
                    $class: 'hudson.model.ChoiceParameterDefinition',
                    choices: [
                        "openshift-bot",
                        "markllama-aos-cd-bot",
                        "markllama"
                    ].join("\n"),
                    defaultValue: 'markllama'
                ],
                [
                    name: 'KRB5_KEYTAB_FILE',
                    description: 'Name of the keyfile for kerberos access',
                    $class: 'hudson.model.StringParameterDefinition',
                    defaultValue: 'jenkins.keytab'
                ],
                [
                    name: 'KRB5_PRINCIPAL',
                    description: 'The name of the kerberos principle to authenticate',
                    $class: 'hudson.model.StringParameterDefinition',
                    defaultValue: 'jenkins'
                ],
                [
                    name: 'BUILD_VERSION',
                    description: 'OCP Version to build',
                    $class: 'hudson.model.StringParameterDefinition',
                    defaultValue: 'master'
                ],
                [
                    name: 'RELEASE',
                    description: 'build local or release',
                    $class: 'hudson.model.BooleanParameterDefinition',
                    defaultValue: false
                ],
                [
                    name: 'SCRATCH',
                    description: 'build an unofficial release',
                    $class: 'hudson.model.BooleanParameterDefinition',
                    defaultValue: true
                ],
                [
                    name: 'DEBUG',
                    description: 'ask commands to print details',
                    $class: 'hudson.model.BooleanParameterDefinition',
                    defaultValue: false
                ],
                [
                    name: 'MOCK',
                    description: 'dont do anything if true',
                    $class: 'hudson.model.BooleanParameterDefinition',
                    defaultValue: false
                ],
                [
                    name: 'NOTIFY_EMAIL',
                    description: 'An email address to notify on job completion',
                    $class: 'hudson.model.StringParameterDefinition',
                    defaultValue: "mlamouri+jenkins@redhat.com"
                ],
                [
                    name: 'NOTIFY_ON',
                    description: 'dont do anything if true',
                    $class: 'hudson.model.ChoiceParameterDefinition',
                    choices: [
                        "success",
                        "failure",
                        "all",
                        "none"
                    ].join("\n"),
                    defaultValue: "failure"
                ],
                
            ]
        ],
        disableConcurrentBuilds()
    ]
)

// convert property strings to proper logical values
release = RELEASE.toBoolean()
scratch = SCRATCH.toBoolean()
mock = MOCK.toBoolean()
debug = DEBUG.toBoolean()

// get a kerberos ticket
def kinit(keytab, principle) {
    def secrets_dir = "/jenkins/agent/.ssh"
    sh "kinit -k -t ${secrets_dir}/${keytab} ${principle}"
}

// ===========================================================================
//
//
//
// ===========================================================================
//def mailFailure(recipients, message, pipeline) {
//    pipeline.mail(
//        to: recipients,
//        from: "aos-cicd@redhat.com",
//        subject: "RESUMABLE Error during Image Build for OCP v${BUILD_VERSION}",
//        body: message);
//}


// ===========================================================================
//
//
//
// ===========================================================================
node(TARGET_NODE) {

    if (mock == true) {
        error "MOCK: just download new copy of pipeline code"
    }

    sh "rm -rf openshift-ansible"

    checkout scm

    // get the list of release numbers from the branch names
    package_name = "openshift-ansible"
    branch_prefix = "release-"
    brew_task_url_prefix = 'https://brewweb.engineering.redhat.com/brew/taskinfo?taskI='

    if (release) {
        kinit(KRB5_KEYTAB_FILE, KRB5_PRINCIPAL)
    }

    package_repo = new GitHubRepository(
        [
            owner: GITHUB_OWNER,
            project: package_name,
            path: package_name,
            pipeline: this,
        ]
    )

    sshagent([SSH_KEY_ID]) {
        releases = package_repo.releases(branch_prefix)
    }
    
    // select the branch to build
    def branch_name
    if (BUILD_VERSION in ['master', 'stage']) {
        branch_name = BUILD_VERSION
    } else if (releases.find { it == BUILD_VERSION } != -1) {
        branch_name = branch_prefix + BUILD_VERSION
    } else {
        error "invalid build version ${BUILD_VERSION}"
    }
    package_repo.branch = branch_name
    
    if (debug) {
        echo "build_version: ${BUILD_VERSION}, branch_name: ${branch_name}"
    }

    rpm = new Rpm([
            repo: package_repo,
            pipeline: this
        ]
    )

    // identify the version being built in the job title
    currentBuild.displayName = "openshift-ansible ${BUILD_VERSION}"

    try {
        sshagent([SSH_KEY_ID]) {
            stage("clone ${rpm.repo.project}") {
                rpm.repo.clone()
            }

            // need new version and new release
            stage("update build/release numbers") {
                def spec = rpm.spec
                spec.load()
                current_version = spec.version
                current_release = spec.release

                def cv = new Version(current_version)
                def cr = new Version(current_release)

                echo "current RPM id: ${current_version}-${current_release}"
                
                // release builds increment the revision and leave the build
                // number at 1.  Dunno why
                //cv.incrRevision()
                def nv = new Version(cv)
                def nr = cr.incrMajor()

                spec.version = nv as String
                spec.release = nr as String

                new_version = spec.version
                new_release = spec.release

                echo "new RPM id: ${new_version}-${new_release}"

                spec.save()
            }

            stage("tag and push") {
                echo "tag and push"
                echo "tagging RPM id: ${new_version}-${new_release}"            
                rpm.tag(
                    version: new_version,
                    release: new_release,
                    debug: debug
                )
            }

            stage("build") {
                if (release) {
                    echo "Building a copy in brew"
                    sh "kinit -k -t /jenkins/agent/.ssh/${KRB5_KEYTAB_FILE} ${KRB_PRINCIPAL}"
                    buildid = rpm.release(scratch, debug)
                    echo "brew build id: ${buildid}"
                } else {
                    echo "Building a local copy"
                    rpm.build(env.WORKSPACE + "/BUILD", debug)
                }
            }
        }
    } catch (err) {
        error("Yeah, it failed: ${err}")
    } finally {
        archiveArtifacts allowEmptyArchive: true, artifacts: "BUILD/**"
    }
}
