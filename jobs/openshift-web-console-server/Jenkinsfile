#!/usr/bin/env groovy

@Library('artlib')
import com.redhat.art.*

// Expose properties for a parameterized build
properties(
    [
        buildDiscarder(
            logRotator(
                artifactDaysToKeepStr: '',
                artifactNumToKeepStr: '',
                daysToKeepStr: '',
                numToKeepStr: '1000')),
        [
            $class: 'ParametersDefinitionProperty',
            parameterDefinitions: [
                [
                    name: 'TARGET_NODE',
                    description: 'Jenkins agent node',
                    $class: 'hudson.model.StringParameterDefinition',
                    defaultValue: 'container'
                ],
                                [
                    name: 'GITHUB_USER',
                    description: 'Github user for source repos',
                    $class: 'hudson.model.ChoiceParameterDefinition',
                    choices: [
                        "openshift",
                        "markllama"
                    ].join("\n"),
                    defaultValue: 'openshift'
                ],
                [
                    name: 'SSH_KEY_ID',
                    description: 'SSH credential id to use',
                    $class: 'hudson.model.ChoiceParameterDefinition',
                    choices: [
                        "openshift-bot",
                        "markllama-aos-cd-bot",
                        "markllama"
                    ].join("\n"),
                    defaultValue: 'markllama'
                ],
                [
                    name: 'BUILD_VERSION',
                    description: 'OCP Version to build',
                    $class: 'hudson.model.StringParameterDefinition',
                    defaultValue: 'master'
                ],
                [
                    name: 'RELEASE',
                    description: 'build local or release',
                    $class: 'hudson.model.BooleanParameterDefinition',
                    defaultValue: false
                ],
                [
                    name: 'SCRATCH',
                    description: 'build an unofficial release',
                    $class: 'hudson.model.BooleanParameterDefinition',
                    defaultValue: true
                ],
                [
                    name: 'DEBUG',
                    description: 'ask commands to print details',
                    $class: 'hudson.model.BooleanParameterDefinition',
                    defaultValue: false
                ],
                [
                    name: 'MOCK',
                    description: 'dont do anything if true',
                    $class: 'hudson.model.BooleanParameterDefinition',
                    defaultValue: false
                ],
            ]
        ],
        disableConcurrentBuilds()
    ]
)

// convert property strings to proper logical values
release = RELEASE.toBoolean()
scratch = SCRATCH.toBoolean()
mock = MOCK.toBoolean()
debug = DEBUG.toBoolean()
debug_shell = debug ? "-x" : "" 

// Initialize $PATH and $GOPATH
def gopath_setup() {
    echo "Adding git managed script directories to PATH"

    GOPATH = "${env.WORKSPACE}/go"
    env.GOPATH = GOPATH
    sh "rm -rf ${GOPATH}"  // Remove any cruft
    sh "mkdir -p ${GOPATH}"
    echo "Initialized env.GOPATH: ${env.GOPATH}"
}

// ***************************************************************************
//
//
//
// ***************************************************************************

/**
 * Retrive the branch list from a remote repository
 * @param repo_url a git@ repository URL.
 * @param pattern a matching pattern for the branch list. Only return matching branches
 *
 * @return a list of branch names.  Removes the leading ref path
 *
 * Requires SSH_AGENT to have set a key for access to the remote repository
 */
def get_branches(repo_url, pattern="") {

    branch_text = sh(
        returnStdout: true,
        script: [
            "git ls-remote ${repo_url} ${pattern}",
            "awk '{print \$2}'",
            "cut -d/ -f3"
        ].join(" | ")
    )

    return branch_text.tokenize("\n")
}

/**
 * Retrive a list of release numbers from the OCP remote repository
 * @param repo_url a git@ repository URL.
 * @return a list of OSE release numbers.
 *
 * Get the branch names beginning with 'enterprise-'.
 * Extract the release number string from each branch release name
 * Sort in version order (compare fields as integers, not strings)
 * Requires SSH_AGENT to have set a key for access to the remote repository
 */
def get_releases(repo_url, pattern="enterprise-") {
    // too clever: chain - get branch names, remove prefix, suffix
    def r = get_branches(repo_url, pattern + '*')
        .collect { it - pattern }
        .findAll { it =~ /^\d+((\.\d+)*)$/ }
        .collect { new VersionString(it) }
        .sort()

    return r
}

def run_script(shell, collection=null) {
    if (collection) {
        echo "running build tools in collection ${collection}"
        wrapper = "scl enable ${collection}"
        return { script -> shell.sh("${wrapper} '${script}'") }
    }

    return { script -> shell.sh script }
}

node(TARGET_NODE) {
    checkout scm
    AOS_CD_JOBS_COMMIT_SHA = sh(
        returnStdout: true,
        script: "git rev-parse HEAD",
    ).trim()
    
    package_name = "origin-web-console-server"
    upstream_project_name = "origin-web-console"
    branch_prefix = "enterprise-"
    brew_task_url_prefix = 'https://brewweb.engineering.redhat.com/brew/taskinfo?taskI='

    repo_url = "git@github.com:${GITHUB_USER}/${package_name}.git"
    upstream_repo_url = "git@github.com:${GITHUB_USER}/${upstream_project_name}.git"
    //spec_filename = "${package_name}.spec"
    spec_filename = "origin-web-console-server.spec"
    spec_path = "${package_name}/${spec_filename}"

    go_source_dir = "go/src/github.com/${GITHUB_USER}"
    package_path = go_source_dir + "/" + package_name
    upstream_project_path = go_source_dir + "/" + upstream_project_name
    // clean up before starting
    sh "rm -rf ${go_source_dir}"
    sh "mkdir -p ${go_source_dir}"
    sh "rm -rf BUILD"

    releases = get_releases(repo_url, branch_prefix)

    if (BUILD_VERSION == 'master') {
        build_version = releases[-1]
    } else {
        build_version = new VersionString(BUILD_VERSION)
    }
    
    collection_installed = sh(
        returnStatus: true,
        script: "rpm -q --quiet go-toolset-7") == 0
    
    if (use_collections && build_version >= new VersionString("3.11")) {
        collection = 'go-toolset-7'
    } else {
        collection = null
    }
    shell = run_script(this, collection)

    gopath_setup()
 
    // select the branch to build
    // NOTE: Valid build versions are only those in the releases.
    // master should not be used, but can default to the most recent release
    def branch_name

    if (BUILD_VERSION == 'stage') {
        error("Not implemented: build should be most recent numbered branch")
    }
    
    if (releases.find { it == build_version } != -1) {
        branch_name = branch_prefix + build_version
    } else {
        error "invalid build version ${build_version}"
    }

    if (debug) {
        echo "build_version: ${build_version}, branch_name: ${branch_name}"
    }

    // remote existing stuff if needed
    // origin-web-console
    // origin-web-console-server
    // go
    
    sshagent([SSH_KEY_ID]) {

        stage("clone ${package_name}") {
            sh(["git clone",
                "--branch ${branch_name}",
                repo_url,
                package_path,
                ].join(' ')
            )
        }

        stage("clone ${upstream_project_name}") {
            sh(["git clone",
                "--branch ${branch_name}",
                upstream_repo_url,
                upstream_project_path
                ].join(' ')
            )
        }

        stage("configure dummy merge") {
            dir(package_path) {
                sh "git config merge.ours.driver true"
            }
            //def gitattributes = package_name + "/.gitattributes"
            def gitattributes = ".gitattributes"
            sh "echo 'pkg/assets/bindata.go merge=ours' >> ${gitattributes}"
            sh "echo 'pkg/assets/java/bindata.go merge=ours' >> ${gitattributes}"
        }

        stage("build upstream") {
            dir(upstream_project_path) {
                sh "git merge origin/master --no-commit --no-ff"
                sh "bash ${debug_shell} ./hack/install-deps.sh"
                sh "grunt build"
                sh "git add dist"
                sh """git commit -m "Merge master into ${branch_name}" --allow-empty"""
                sh "git reset --hard HEAD"
            }
        }

//        stage("prepare go-bindata") {
//            sh "mkdir -p ~/go"
//            sh "go get github.com/jteeuwen/go-bindata"
//            sh "go build github.com/jteeuwen/go-bindata"
//            sh "go install github.com/jteeuwen/go-bindata"
//        }
        
        stage("merge upstream ${upstream_project_name}") {
            dir(package_path) {
                // the resulting commit is used in the downstream merge message
                VC_COMMIT =  sh(
                    script: [
                        "GIT_REF=${branch_name} bash ${debug_shell} hack/vendor-console.sh 2>/dev/null",
                        "grep 'Vendoring origin-web-console'",
                        "awk '{print \$4}'"
                    ].join(" | "),
                    returnStdout: true
                ).trim()

                echo "VC_COMMIT - Commit = '${VC_COMMIT}'"

                if (VC_COMMIT == "") {
                    sh(
                        "GIT_REF=${branch_name} bash ${debug_shell} hack/vendor-console.sh"
                    )
                }
                sh "git add pkg/assets/bindata.go"
                sh "git add pkg/assets/java/bindata.go"
                sh "git commit -m 'bump origin-web-console ${VC_COMMIT}' --allow-empty"
            }
        }

        stage("tag and push") {
            echo "tag and push"
            dir(package_path) {
                shell(
                    [
                        "tito tag",
                        (debug ? '--debug' : ''),
                        '--accept-auto-changelog',
                        '--use-version', build_version + ".1",
                        '--use-release', '1'
                    ].join(' ')
                )
            }
        }

        stage("build") {
            //tito_release(this, package_name, new_version, scratch)
            //tito_build(this, package_name)
            def output_root = env.WORKSPACE + '/BUILD'
            dir(package_path) {
                shell(
                    [
                        "tito build",
                        (debug ? '--debug' : ''),
                        '--offline',
                        '--rpm',
                        '--output', output_root,
                    ].join(' ')
                )
            }
        }

    }

    archiveArtifacts allowEmptyArchive: true, artifacts: "BUILD/**"
}
