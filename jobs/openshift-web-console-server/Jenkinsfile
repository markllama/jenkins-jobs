// Build something

@Library('artlib')
import com.redhat.art.*

// Expose properties for a parameterized build
properties(
    [
        buildDiscarder(
            logRotator(
                artifactDaysToKeepStr: '',
                artifactNumToKeepStr: '',
                daysToKeepStr: '5',
                numToKeepStr: '10')),
        [
            $class: 'ParametersDefinitionProperty',
            parameterDefinitions: [
                [
                    name: 'TARGET_NODE',
                    description: 'Jenkins agent node',
                    $class: 'hudson.model.StringParameterDefinition',
                    defaultValue: 'container'
                ],
                                [
                    name: 'GITHUB_OWNER',
                    description: 'Github owner for source repos',
                    $class: 'hudson.model.ChoiceParameterDefinition',
                    choices: [
                        "openshift",
                        "markllama"
                    ].join("\n"),
                    defaultValue: 'openshift'
                ],
                [
                    name: 'SSH_KEY_ID',
                    description: 'SSH credential id to use',
                    $class: 'hudson.model.ChoiceParameterDefinition',
                    choices: [
                        "openshift-bot",
                        "markllama-aos-cd-bot",
                        "markllama"
                    ].join("\n"),
                    defaultValue: 'markllama'
                ],
                [
                    name: 'BUILD_VERSION',
                    description: 'OCP Version to build',
                    $class: 'hudson.model.StringParameterDefinition',
                    defaultValue: 'master'
                ],
                [
                    name: 'RELEASE',
                    description: 'build local or release',
                    $class: 'hudson.model.BooleanParameterDefinition',
                    defaultValue: false
                ],
                [
                    name: 'SCRATCH',
                    description: 'build an unofficial release',
                    $class: 'hudson.model.BooleanParameterDefinition',
                    defaultValue: true
                ],
                [
                    name: 'DEBUG',
                    description: 'ask commands to print details',
                    $class: 'hudson.model.BooleanParameterDefinition',
                    defaultValue: false
                ],
                [
                    name: 'MOCK',
                    description: 'dont do anything if true',
                    $class: 'hudson.model.BooleanParameterDefinition',
                    defaultValue: false
                ],
            ]
        ],
        disableConcurrentBuilds()
    ]
)

// convert property strings to proper logical values
release = RELEASE.toBoolean()
scratch = SCRATCH.toBoolean()
mock = MOCK.toBoolean()
debug = DEBUG.toBoolean()
debug_shell = debug ? "-x" : ""

// ***************************************************************************
//
//
//
// ***************************************************************************

// Initialize $PATH and $GOPATH
def gopath_setup() {
    echo "Adding git managed script directories to PATH"

    GOPATH = "${env.WORKSPACE}/go"
    env.GOPATH = GOPATH
    sh "rm -rf ${GOPATH}"  // Remove any cruft
    sh "mkdir -p ${GOPATH}"
    echo "Initialized env.GOPATH: ${env.GOPATH}"
}

def wrap_script(shell, collection=null) {
    if (collection) {
        echo "running build tools in collection ${collection}"
        wrapper = "scl enable ${collection}"
        return { script -> shell.sh("${wrapper} '${script}'") }
    }

    return { script -> shell.sh script }
}

def Boolean package_installed(String package_name) {
    return sh(returnStatus: true, script: "rpm -q --quiet ${package_name}") == 0
}

// ***************************************************************************
//
//
//
// ***************************************************************************

node(TARGET_NODE) {

    if (mock == true) {
        error "MOCK: just download new copy of pipeline code"
    }

    checkout scm
    AOS_CD_JOBS_COMMIT_SHA = sh(
        returnStdout: true,
        script: "git rev-parse HEAD",
    ).trim()

    repo_name = "origin-web-console-server"
    upstream_name = "origin-web-console"
    branch_prefix = "enterprise-"
    brew_task_url_prefix = 'https://brewweb.engineering.redhat.com/brew/taskinfo?taskI='

    go_source_dir = "go/src/github.com/${GITHUB_OWNER}"

    // clean up before starting
    sh "rm -rf ${go_source_dir}"
    sh "mkdir -p ${go_source_dir}"
    sh "rm -rf BUILD"

    repo_path = go_source_dir + "/" + repo_name
    upstream_path = go_source_dir + "/" + upstream_name

    package_repo = new GitHubRepository(
        [
            owner: GITHUB_OWNER,
            project: "origin-web-console-server",
            package_name: "origin-web-console",
            //path: repo_path,
            pipeline: this
        ])

    if (debug) {
        echo """
package_repo:
  owner: ${package_repo.owner}
  project: ${package_repo.project}
  branch: ${package_repo.branch}
  path: ${package_repo.path}
  package_name: ${package_repo.package_name}
  password: ${package_repo.password}

  remote: ${package_repo.remote}
  url: ${package_repo.url}
  specfile: ${package_repo.specfile}
  specpath: ${package_repo.specpath}
"""
    }

    SSHKEY([SSH_KEY_ID]) {
        def branches = package_repo.branches("enterprise-*")

        echo "Branches: ${branches}"
    
        def releases = package_repo.releases(branch_prefix)

        echo "releases: ${releases}"
    }

    archiveArtifacts allowEmptyArchive: true, artifacts: "BUILD/**"
}
