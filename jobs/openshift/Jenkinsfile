// Build the OpenShift Ansible RPM

@Library('artlib')
import com.redhat.art.*

properties(
    [
        buildDiscarder(
            logRotator(
                artifactDaysToKeepStr: '',
                artifactNumToKeepStr: '',
                daysToKeepStr: '5',
                numToKeepStr: '10'
            )
        ),
        [
            $class: 'ParametersDefinitionProperty',
            parameterDefinitions: [
                [
                    name: 'TARGET_NODE',
                    description: 'Jenkins agent node',
                    $class: 'hudson.model.StringParameterDefinition',
                    defaultValue: 'container'
                ],
                [
                    name: 'GITHUB_OWNER',
                    description: 'Github ownerfor repos',
                    $class: 'hudson.model.ChoiceParameterDefinition',
                    choices: [
                        "openshift",
                        "markllama"
                    ].join("\n"),
                    defaultValue: 'openshift'
                ],
                [
                    name: 'SSH_KEY_ID',
                    description: 'SSH credential id to use',
                    $class: 'hudson.model.ChoiceParameterDefinition',
                    choices: [
                        "openshift-bot",
                        "markllama-aos-cd-bot",
                        "markllama"
                    ].join("\n"),
                    defaultValue: 'markllama'
                ],
                [
                    name: 'BUILD_VERSION',
                    description: 'OCP Version to build',
                    $class: 'hudson.model.StringParameterDefinition',
                    defaultValue: 'master'
                ],
                [
                    name: 'RELEASE',
                    description: 'build local or release',
                    $class: 'hudson.model.BooleanParameterDefinition',
                    defaultValue: false
                ],
                [
                    name: 'SCRATCH',
                    description: 'build an unofficial release',
                    $class: 'hudson.model.BooleanParameterDefinition',
                    defaultValue: true
                ],
                [
                    name: 'DEBUG',
                    description: 'ask commands to print details',
                    $class: 'hudson.model.BooleanParameterDefinition',
                    defaultValue: false
                ],
                [
                    name: 'MOCK',
                    description: 'dont do anything if true',
                    $class: 'hudson.model.BooleanParameterDefinition',
                    defaultValue: false
                ],
            ]
        ],
        disableConcurrentBuilds()
    ]
)

// convert property strings to proper logical values
release = RELEASE.toBoolean()
scratch = SCRATCH.toBoolean()
mock = MOCK.toBoolean()
debug = DEBUG.toBoolean()
debug_shell = debug ? "-x" : ""

// ***************************************************************************
//
//
//
// ***************************************************************************

def gopath_setup() {
    echo "Adding git managed script directories to PATH"
 
    GOPATH = "${env.WORKSPACE}/go"
    env.GOPATH = GOPATH
    sh "rm -rf ${GOPATH}"  // Remove any cruft
    sh "mkdir -p ${GOPATH}"
    echo "Initialized env.GOPATH: ${env.GOPATH}"
}

def wrap_script(shell, collection=null) {
    if (collection) {
        echo "running build tools in collection ${collection}"
        wrapper = "scl enable ${collection}"
        return { script -> shell.sh("${wrapper} '${script}'") }
    }

    return { script -> shell.sh script }
}

def Boolean package_installed(String package_name) {
    return sh(returnStatus: true, script: "rpm -q --quiet ${package_name}") == 0
}

// ===========================================================================
//
//
//
// ===========================================================================
def patch_tito(pipeline) {
    def tito_version = pipeline.sh(
        returnStdout: true,
        script: 'rpm -q --qf "%{VERSION}" tito'
    )

    def tagger_py = ".tito/lib/origin/tagger/__init__.py"
    patched = sh returnStatus: true, script: "grep -q 'release is None' ${tagger_py}"
    if (tito_version == '0.6.11' && patched != 0) {
        pipeline.echo "Patching tito tagger customizations for tito-0.6.11"
        pipeline.dir(repo_name) {
            // remove the get_tag_for_version function
            pipeline.sh "sed -i -e '/_get_tag_for_version/,\$d' ${tagger_py}"
            // add the version we want
            pipeline.sh """cat >> ${tagger_py} <<EOF
    def _get_tag_for_version(self, version, release=None):
        if release is None:
          return "v{}".format(version)
        else:
          return "v{}-{}".format(version, release)
EOF
"""
        }
    }
}

// ===========================================================================
//
//
//
// ===========================================================================
node(TARGET_NODE) {

    if (mock == true) {
        error "MOCK: just download new copy of pipeline code"
    }

    checkout scm

    gopath_setup()

    collection_installed = package_installed('go-toolset-7')

    // get the list of release numbers from the branch names
    repo_name = "ose"
    upstream_project = "origin"
    branch_prefix = "enterprise-"
    brew_task_url_prefix = 'https://brewweb.engineering.redhat.com/brew/taskinfo?taskI='

    // clean up before starting
    sh "rm -rf $repo_name"

    package_repo = new GitHubRepository(
        [
            owner: GITHUB_OWNER,
            project: "ose",
            package_name: "origin",
            pipeline: this
        ])

    spec_path = package_repo.specpath

    sshagent([SSH_KEY_ID]) {
        releases = package_repo.releases(branch_prefix)
    }
    
    // select the branch to build
    def branch_name
    if (BUILD_VERSION in ['master', 'stage']) {
        build_version = BUILD_VERSION
        branch_name = BUILD_VERSION
        upstream_branch_name = BUILD_VERSION
    } else {
        build_version = new Version(BUILD_VERSION)
        if (releases.find { it == build_version } != -1) {
            branch_name = branch_prefix + build_version
            upstream_branch_name = 'release-' + build_version
        } else {
            error "invalid build version ${BUILD_VERSION}"
       }
    }

    if (debug) {
        echo "build_version: ${build_version}, branch_name: ${branch_name}"
    }

    package_repo.branch = branch_name

    rpm = new Rpm(repo: package_repo, pipeline: this)

    def spec = rpm.spec
    echo "spec: ${spec}"
    echo "spec filename: ${spec.filename}"
    
    sshagent([SSH_KEY_ID]) {
        stage("clone ${rpm.repo.project}") {
            rpm.repo.clone()
        }

        echo "inside sshagent spec: ${spec}"
        echo "inside sshagent spec filename: ${spec.filename}"
    
        spec.load()
        if (build_version == 'master') {
            echo("detecting master version")
            def version_string = spec.version
            def version = new Version(version_string)
            echo "version: ${version}"
            echo "MajorMinor: ${version.majorminor}"
            build_version = new Version(version.majorminor)
        }

        // versions >= 3.11 require go-toolset-7 software collection to build
        def scl_version = new Version("3.11")
        if (build_version >= scl_version) {
            echo "using go-toolset-7 Software Collection to build"
            if (collection_installed) {
                collection = "go-toolset-7"
            } else {
                error("OCP versions >= 3.11 require go-toolset-7 SCL collection")
            }
        } else {
            echo "go-toolset-7 software collection disabled"
            collection = null
        }
        rpm.collection = collection

        stage("configure dummy merge") {
            package_repo.config("merge.ours.driver", "true")
            package_repo.set_attribute('pkg/assets/bindata.go', 'merge', 'ours')
            package_repo.set_attribute('pkg/assets/java/bindata.go', 'merge', 'ours')
        }

        stage("add upstream remote") {
            package_repo.addRemote("upstream", upstream_project)
        }

        stage("merge upstream") {
            package_repo.fetch('upstream')
            package_repo.merge("upstream", upstream_branch_name)
        }
        
        // need new version and new release
        stage("update build/release numbers") {
            spec = rpm.spec
            spec.load()

            current_version = spec.version
            current_release = spec.release
            
            def cv = new Version(current_version)
            def cr = new Version(current_release)

            echo "current RPM id: ${cv}-${cr}"

            // release builds increment the revision and leave the build
            // number at 1.  Dunno why
            //cv.incrRevision()
            def nv = new Version(cv)
            def nr = cr.incrMajor()

            spec.version = nv as String
            spec.release = nr as String

            new_version = spec.version
            new_release = spec.release

            echo "new RPM id: ${new_version}-${new_release}"

            spec.save()

            dir(repo.path) {
                sh "git commit --allow-empty -m 'updated version to ${new_version}-${new_release}' ${package_repo.specfile}"
                //sh "git tag ${new_version}-${new_release}"
            }

        }

        stage("tag and push") {
            echo "tag and push"
            echo new_version as String
            echo "new version: ${new_version}, new release: ${new_release}"
            rpm.tag(
                version: new_version,
                release: new_release,
                debug: debug
            )
        }

        stage("build") {
            rpm.build(
                destination: env.WORKSPACE + '/BUILD',
                debug: debug
            )
        }
    }

    archiveArtifacts allowEmptyArchive: true, artifacts: "BUILD/*.src.rpm"
    archiveArtifacts allowEmptyArchive: true, artifacts: "BUILD/x86_64/*.rpm"
    archiveArtifacts allowEmptyArchive: true, artifacts: "BUILD/noarch/*.rpm"
}
