// Build the OpenShift Ansible RPM

@Library('artlib')

import com.redhat.art.*

properties(
    [
        buildDiscarder(
            logRotator(
                artifactDaysToKeepStr: '',
                artifactNumToKeepStr: '',
                daysToKeepStr: '',
                numToKeepStr: '10'
            )
        ),
        [
            $class: 'ParametersDefinitionProperty',
            parameterDefinitions: [
                [
                    name: 'TARGET_NODE',
                    description: 'Jenkins agent node',
                    $class: 'hudson.model.StringParameterDefinition',
                    defaultValue: 'container'
                ],
                [
                    name: 'GITHUB_OWNER',
                    description: 'Github ownerfor repos',
                    $class: 'hudson.model.ChoiceParameterDefinition',
                    choices: [
                        "openshift",
                        "markllama"
                    ].join("\n"),
                    defaultValue: 'openshift'
                ],
                [
                    name: 'SSH_KEY_ID',
                    description: 'SSH credential id to use',
                    $class: 'hudson.model.ChoiceParameterDefinition',
                    choices: [
                        "openshift-bot",
                        "markllama-aos-cd-bot",
                        "markllama"
                    ].join("\n"),
                    defaultValue: 'markllama'
                ],
                [
                    name: 'BUILD_VERSION',
                    description: 'OCP Version to build',
                    $class: 'hudson.model.StringParameterDefinition',
                    defaultValue: 'master'
                ],
                [
                    name: 'RELEASE',
                    description: 'build local or release',
                    $class: 'hudson.model.BooleanParameterDefinition',
                    defaultValue: false
                ],
                [
                    name: 'SCRATCH',
                    description: 'build an unofficial release',
                    $class: 'hudson.model.BooleanParameterDefinition',
                    defaultValue: true
                ],
//                [
//                    name: 'USE_COLLECTIONS',
//                    description: 'enable SCL collection go-toolset-7',
//                    $class: 'hudson.model.BooleanParameterDefinition',
//                    defaultValue: false
//                ],
                [
                    name: 'DEBUG',
                    description: 'ask commands to print details',
                    $class: 'hudson.model.BooleanParameterDefinition',
                    defaultValue: false
                ],
                [
                    name: 'MOCK',
                    description: 'dont do anything if true',
                    $class: 'hudson.model.BooleanParameterDefinition',
                    defaultValue: false
                ],
            ]
        ],
        disableConcurrentBuilds()
    ]
)

// convert property strings to proper logical values
release = RELEASE.toBoolean()
//use_collections = USE_COLLECTIONS.toBoolean()
scratch = SCRATCH.toBoolean()
mock = MOCK.toBoolean()
debug = DEBUG.toBoolean()

// ***************************************************************************
//
//
//
// ***************************************************************************

def gopath_setup() {
    echo "Adding git managed script directories to PATH"
 
    GOPATH = "${env.WORKSPACE}/go"
    env.GOPATH = GOPATH
    sh "rm -rf ${GOPATH}"  // Remove any cruft
    sh "mkdir -p ${GOPATH}"
    echo "Initialized env.GOPATH: ${env.GOPATH}"
}

def run_script(shell, collection=null) {
    if (collection) {
        echo "running build tools in collection ${collection}"
        wrapper = "scl enable ${collection}"
        return { script -> shell.sh("${wrapper} '${script}'") }
    }

    return { script -> shell.sh script }
}

def Boolean package_installed(String package_name) {
    return sh(returnStatus: true, script: "rpm -q --quiet ${package_name}") == 0
}

// ===========================================================================
//
//
//
// ===========================================================================
def patch_tito(pipeline) {
    def tito_version = pipeline.sh(
        returnStdout: true,
        script: 'rpm -q --qf "%{VERSION}" tito'
    )

    def tagger_py = ".tito/lib/origin/tagger/__init__.py"
    patched = sh returnStatus: true, script: "grep -q 'release is None' ${tagger_py}"
    if (tito_version == '0.6.11' && patched != 0) {
        pipeline.echo "Patching tito tagger customizations for tito-0.6.11"
        pipeline.dir(repo_name) {
            // remove the get_tag_for_version function
            pipeline.sh "sed -i -e '/_get_tag_for_version/,\$d' ${tagger_py}"
            // add the version we want
            pipeline.sh """cat >> ${tagger_py} <<EOF
    def _get_tag_for_version(self, version, release=None):
        if release is None:
          return "v{}".format(version)
        else:
          return "v{}-{}".format(version, release)
EOF
"""
        }
    }
}


def tito_release(pipeline, repo_name, version, scratch=true)  {
    pipeline.dir(repo_name) {
        def tito_output = pipeline.sh(
            returnStdout: true,
            script: [
                'tito release',
                (debug ? '--debug' : ''),
                '--yes',
                '--test',
                (scratch ? '--scratch' : ''),
                "aos-${new_version}"
            ].join(' ')
        )

        def tito_lines = tito_output.tokenize('\n')
        def task_line = tito_lines.find{ it =~ /^Created Task: / }
        def task_matcher = task_line =~ /^Created Task:\s+([0-9]+)/
        brew_task_id = task_matcher[0][1]
        brew_task_url = brew_task_url_prefix + brew_task_id
        pipeline.echo "${package_name} rpm brew task: ${brew_task_id}"
    
        try {
            pipeline.sh "brew watch-task ${brew_task_id}"
        } catch (build_err) {
            pipeline.echo "Error in ${package_name} build task: ${brew_task_url}"
            throw build_err
        }
    }
}

def tito_build(pipeline, repo_name)  {
    def output_root = pipeline.env.WORKSPACE + '/BUILD'
    pipeline.dir(repo_name) {
        pipeline.sh(
            script: [
                "scl enable go-toolset-7 'tito build",
                (debug ? '--debug' : ''),
                '--offline',
                '--rpm',
                '--output', output_root,
                "'"
            ].join(' ')
        )
    }
}


// ===========================================================================
//
//
//
// ===========================================================================
node(TARGET_NODE) {

    if (mock == true) {
        error "MOCK: just download new copy of pipeline code"
    }

    checkout scm

    gopath_setup()

    collection_installed = package_installed('go-toolset-7')

    // get the list of release numbers from the branch names
    repo_name = "ose"
    upstream_project = "origin"
    branch_prefix = "enterprise-"
    brew_task_url_prefix = 'https://brewweb.engineering.redhat.com/brew/taskinfo?taskI='

    // clean up before starting
    sh "rm -rf $repo_name"

    package_repo = new GitHubRepository(
        [
            owner: GITHUB_OWNER,
            project: "ose",
            package_name: "origin",
            pipeline: this
        ])

    spec_path = package_repo.specpath

    releases = package_repo.releases(branch_prefix)
    
    // select the branch to build
    def branch_name
    if (BUILD_VERSION in ['master', 'stage']) {
        build_version = BUILD_VERSION
        branch_name = BUILD_VERSION
        upstream_branch_name = BUILD_VERSION
    } else {
        build_version = new VersionString(BUILD_VERSION)
        if (releases.find { it == build_version } != -1) {
            branch_name = branch_prefix + build_version
            upstream_branch_name = 'release-' + build_version
        } else {
            error "invalid build version ${BUILD_VERSION}"
       }
    }

    if (debug) {
        echo "build_version: ${build_version}, branch_name: ${branch_name}"
    }

    package_repo.branch = branch_name
    
    sshagent([SSH_KEY_ID]) {
        stage("clone ${repo_name}") {
            package_repo.clone()
        }
        
        def rpm_spec = new RpmSpecfile(readFile(package_repo.specpath))
        if (build_version == 'master') {
            echo("detecting master version")
            def version_string = rpm_spec.version
            def version = new VersionString(version_string)
            echo "version: ${version}"
            echo "MajorMinor: ${version.majorminor}"
            build_version = new VersionString(version.majorminor)
        }

        // versions >= 3.11 require go-toolset-7 software collection to build
        def scl_version = new VersionString("3.11")
        if (build_version >= scl_version) {
            echo "using go-toolset-7 Software Collection to build"
            if (collection_installed) {
                collection = "go-toolset-7"
            } else {
                error("OCP versions >= 3.11 require go-toolset-7 SCL collection")
            }
        } else {
            echo "go-toolset-7 software collection disabled"
            collection = null
        }
        def shell = run_script(this, collection)

        stage("configure dummy merge") {
            dir(repo_name) {
                sh "git config merge.ours.driver true"
            }
            def gitattributes = repo_name + "/.gitattributes"
            sh "echo 'pkg/assets/bindata.go merge=ours' >> ${gitattributes}"
            sh "echo 'pkg/assets/java/bindata.go merge=ours' >> ${gitattributes}"
        }

        stage("add upstream remote") {
            package_repo.addRemote("upstream", upstream_project)
        }

        stage("merge upstream") {
            package_repo.fetch('upstream')
            package_repo.merge("upstream", upstream_branch_name)
        }
        
        // need new version and new release
        stage("update build/release numbers") {
            def cv = new VersionString(rpm_spec.version)
            def cr = new VersionString(rpm_spec.release)

            echo "current RPM id: ${cv}-${cr}"

            // release builds increment the revision and leave the build
            // number at 1.  Dunno why
            //cv.incrRevision()
            def nv = new VersionString(cv)
            def nr = cr.incrMajor()

            rpm_spec.version = nv as String
            rpm_spec.release = nr as String

            new_version = rpm_spec.version
            new_release = rpm_spec.release

            echo "new RPM id: ${new_version}-${new_release}"
            
            writeFile file: spec_path, text: rpm_spec.body

            dir(repo_name) {
                sh "git commit --allow-empty -m 'updated version to ${new_version}-${new_release}' ${package_repo.specfile}"
                //sh "git tag ${new_version}-${new_release}"
            }

        }

        stage("tag and push") {
            echo "tag and push"
            dir(repo_name) {
                patch_tito(this)
                shell(
                    [
                        "tito tag",
                        (debug ? '--debug' : ''),
                        '--accept-auto-changelog',
                        '--keep-version',
                        //'--use-version', new_version,
                        //'--use-release', new_release
                    ].join(' ')
                )
            }
        }

        stage("build") {
            //tito_release(this, repo_name, new_version, scratch)
            //tito_build(this, repo_name)
            def output_root = env.WORKSPACE + '/BUILD'
            dir(repo_name) {
                shell(
                    [
                        "tito build",
                        (debug ? '--debug' : ''),
                        '--offline',
                        '--rpm',
                        '--output', output_root,
                    ].join(' ')
                )
            }
        }
    }

    archiveArtifacts allowEmptyArchive: true, artifacts: "BUILD/*.src.rpm"
    archiveArtifacts allowEmptyArchive: true, artifacts: "BUILD/x86_64/*.rpm"
    archiveArtifacts allowEmptyArchive: true, artifacts: "BUILD/noarch/*.rpm"
}
