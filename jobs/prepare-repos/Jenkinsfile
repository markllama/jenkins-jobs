//
// Create the repos needed to build OpenShift
//
// Expose properties for a parameterized build
properties(
    [
        buildDiscarder(
            logRotator(
                artifactDaysToKeepStr: '',
                artifactNumToKeepStr: '',
                daysToKeepStr: '',
                numToKeepStr: '1000')),
        [
            $class: 'ParametersDefinitionProperty',
            parameterDefinitions: [
                [
                    name: 'TARGET_NODE',
                    description: 'Jenkins agent node',
                    $class: 'hudson.model.StringParameterDefinition',
                    defaultValue: 'container'
                ],
                [
                    name: 'GITHUB_TOKEN_FILENAME',
                    description: 'The name of a file containing an OAuth token for API access',
                    $class: 'hudson.model.StringParameterDefinition',
                    defaultValue: '/jenkins/agent/.ssh/github-token-oauth.txt'
                ],
                [
                    name: 'SSH_KEY_ID',
                    description: 'SSH credential id to use',
                    $class: 'hudson.model.ChoiceParameterDefinition',
                    choices: [
                        "markllama",
                        "none"
                    ].join("\n"),
                    defaultValue: 'markllama'
                ],
            ]
        ],
        disableConcurrentBuilds()
    ]
)


// Read a string from a file.  The string should be an OAuth token for access to a Github account
// @param token_file - a file containing a single OAuth token string
// @return - a string containing the OAuth token
def read_oauth_token(token_file) {
    token_string = sh (
        returnStdout: true,
        script: "cat ${token_file}"
    ).trim()
    return token_string
}

// get a single file from a github repo

def get_single_file(owner, repo_name, file_name, repo_token) {
    // Get a single file from a Github repository.

    auth_header = "Authorization: token " + repo_token
    file_url = "https://api.github.com/repos/${owner}/${repo_name}/contents/${file_name}"
    accept_header = "Accept: application/vnd.github.v3.raw"
    query = "curl --silent -H '${auth_header}' -H '${accept_header}' -L ${file_url}"
    content = sh(
	      returnStdout: true,
        script: query
    )
    return content
}

/**
 * Take an RPM spec file and return a map with the version and release strings
 **/

@NonCPS
def extract_rpm_version(spec_content) {
    def ver_matcher = spec_content =~ /Version:\s*([.0-9]+)/
    if ( ! ver_matcher ) { // Groovy treats matcher as boolean in this context
        error( "Unable to extract Version field from RPM spec" )
    }
    return ver_matcher[0][1]
}

// Matcher is not serializable; use NonCPS
@NonCPS
def extract_rpm_release(spec_content) {
    def rel_matcher = spec_content =~ /Release:\s*([.a-zA-Z0-9+-]+)/  // Do not match vars like %{?dist}
    if ( ! rel_matcher ) { // Groovy treats matcher as boolean in this context
        error( "Unable to extract Release field from RPM spec" )
    }
    return rel_matcher[0][1]
}

/**
 * Retrive the branch list from a remote repository
 * @param repo_url a git@ repository URL.
 * @param pattern a matching pattern for the branch list. Only return matching branches
 *
 * @return a list of branch names.  Removes the leading ref path
 *
 * Requires SSH_AGENT to have set a key for access to the remote repository
 */
def get_remote_branches(repo_url, pattern="") {

    branch_text = sh(
        returnStdout: true,
        script: [
            "git ls-remote ${repo_url} ${pattern}",
            "awk '{print \$2}'",
            "cut -d/ -f3"
        ].join(" | ")
    )

    return branch_text.split("\n")
}

/**
 * Retrive a list of release numbers from the OCP remote repository
 * @param repo_url a git@ repository URL.
 * @return a list of OSE release numbers.
 *
 * Get the branch names beginning with 'enterprise-'.
 * Extract the release number string from each branch release name
 * Sort in version order (compare fields as integers, not strings)
 * Requires SSH_AGENT to have set a key for access to the remote repository
 */
@NonCPS
def get_releases(repo_url) {
    // too clever: chain - get branch names, remove prefix, suffix
    r = get_branches(repo_url, "enterprise-*").collect { it - "enterprise-" }.findAll { it =~ /^\d+((\.\d+)*)$/ }

    // and sort
    z = sort_versions(r)
    return z
}

// get a list of branches from a remote github

node(TARGET_NODE) {

    token_file_name = GITHUB_TOKEN_FILENAME
    github_token = read_oauth_token(token_file_name)
    //
    // Given a version number to build, determmine how to configure the
    // local git workspacexz
    //
    stage("survey") {
        echo "BEGIN STAGE: survey"

        if (github_token == "") {
            error("failed to read file $token_file_name")
        }

        // 
        master_rpm_spec = get_single_file(
            'markllama', 'ose', 'origin.spec', github_token
        )

        echo "master rpm spec size: ${master_rpm_spec.size()}"
        
        master_version = extract_rpm_version(master_rpm_spec)
        master_release = extract_rpm_release(master_rpm_spec)

        echo master_version
        echo master_release


        sshagent([SSH_KEY_ID]) {
        //
            branches = get_remote_branches(
                "git@github.com:markllama/ose",
                "enterprise-"
            )
        }

        echo branches
        echo "END STAGE: survey"
    }
}
