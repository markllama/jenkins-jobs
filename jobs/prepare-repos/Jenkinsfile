//
// Create the repos needed to build OpenShift
//


// ===========================================================================
//
//
//
// ===========================================================================

// Expose properties for a parameterized build
properties(
    [
        buildDiscarder(
            logRotator(
                artifactDaysToKeepStr: '',
                artifactNumToKeepStr: '',
                daysToKeepStr: '',
                numToKeepStr: '1000')),
        [
            $class: 'ParametersDefinitionProperty',
            parameterDefinitions: [
                // where to run the build. This really should be done by
                // tagging the job and a set of agent nodes to match
                [
                    name: 'TARGET_NODE',
                    description: 'Jenkins agent node',
                    $class: 'hudson.model.StringParameterDefinition',
                    defaultValue: 'container'
                ],

                // Actual build control parameters
                [
                    name: 'BUILD_VERSION',
                    description: 'The version to build',
                    $class: 'hudson.model.StringParameterDefinition',
                    defaultValue: '3.10'
                ],

                // all of these parameters are used to access git repos
                [
                    name: 'GITHUB_OWNER',
                    description: 'The base URL of the github repos',
                    $class: 'hudson.model.StringParameterDefinition',
                    defaultValue: "markllama"
                ],
                [
                    name: 'GITHUB_TOKEN_FILENAME',
                    description: 'The name of a file containing an OAuth token for API access',
                    $class: 'hudson.model.StringParameterDefinition',
                    defaultValue: '/jenkins/agent/.ssh/github-token-oauth.txt'
                ],
                [
                    name: 'SSH_KEY_ID',
                    description: 'SSH credential id to use',
                    $class: 'hudson.model.ChoiceParameterDefinition',
                    choices: [
                        "markllama",
                        "markllama-aos-cd-bot"
                    ].join("\n"),
                    defaultValue: 'markllama-aos-cd-bot'
                ],
            ]
        ],
        disableConcurrentBuilds()
    ]
)


// ===========================================================================
//
//
//
// ===========================================================================

class GitRepository {
    String owner
    String project
    String oauth_token

    def http_url() {
        return "https://github.com/${this.owner}/${this.project}"
    }

    // Read a string from a file.  The string should be an OAuth token for access to a Github account
    // @param token_file - a file containing a single OAuth token string
    // @return - a string containing the OAuth token
    def read_oauth_token(token_file) {
        token_string = sh (
            returnStdout: true,
            script: "cat ${token_file}"
        ).trim()

        this.oauth_token = token_string
    }

    /**
     * Retrive the branch list from a remote repository
     * @param repo_url a git@ repository URL.
     * @param pattern a matching pattern for the branch list. Only return matching branches
     *
     * @return a list of branch names.  Removes the leading ref path
     *
     * Requires SSH_AGENT to have set a key for access to the remote repository
     */
    def get_remote_branches(pattern="") {

        repo_url = this.http_url()
        
        branch_text = sh(
            returnStdout: true,
            script: [
                "git ls-remote ${repo_url} ${pattern}",
                "awk '{print \$2}'",
                "cut -d/ -f3"
            ].join(" | ")
        ).trim()

        return branch_text.split()
    }

    /**
     * Retrieve a single file from a Github repository
     * @param owner
     * @param repo_name
     * @param file_name
     * @param repo_token
     * @param branch
     * @return a string containing the contents of the specified file
     */
    def get_single_file(file_name, repo_token, branch='master') {
        // Get a single file from a Github repository.

        auth_header = "Authorization: token " + repo_token
        file_url = "https://api.github.com/repos/${this.owner}/${this.project}/contents/${file_name}?ref=${branch}"
        accept_header = "Accept: application/vnd.github.v3.raw"

        query = "curl --silent -H '${auth_header}' -H '${accept_header}' -L ${file_url}"
        content = sh(
	          returnStdout: true,
            script: query
        )

        return content
    }
}


// Read a string from a file.  The string should be an OAuth token for access to a Github account
// @param token_file - a file containing a single OAuth token string
// @return - a string containing the OAuth token
def read_oauth_token(token_file) {
    token_string = sh (
        returnStdout: true,
        script: "cat ${token_file}"
    ).trim()
    return token_string
}

/**
 * Retrieve a single file from a Github repository
 * @param owner
 * @param repo_name
 * @param file_name
 * @param repo_token
 * @param branch
 * @return a string containing the contents of the specified file
 */
def get_single_file(owner, repo_name, file_name, repo_token, branch='master') {
    // Get a single file from a Github repository.

    auth_header = "Authorization: token " + repo_token
    file_url = "https://api.github.com/repos/${owner}/${repo_name}/contents/${file_name}?ref=${branch}"
    accept_header = "Accept: application/vnd.github.v3.raw"

    query = "curl --silent -H '${auth_header}' -H '${accept_header}' -L ${file_url}"
    content = sh(
	      returnStdout: true,
        script: query
    )

    return content
}

/**
 * Take an RPM spec file and return a map with the version and release strings
 **/

@NonCPS
def extract_rpm_version(spec_content) {
    def ver_matcher = spec_content =~ /Version:\s*([.0-9]+)/
    if ( ! ver_matcher ) { // Groovy treats matcher as boolean in this context
        error( "Unable to extract Version field from RPM spec" )
    }
    return ver_matcher[0][1]
}

// Matcher is not serializable; use NonCPS
@NonCPS
def extract_rpm_release(spec_content) {
    def rel_matcher = spec_content =~ /Release:\s*([.a-zA-Z0-9+-]+)/  // Do not match vars like %{?dist}
    if ( ! rel_matcher ) { // Groovy treats matcher as boolean in this context
        error( "Unable to extract Release field from RPM spec" )
    }
    return rel_matcher[0][1]
}

/**
 * Retrive the branch list from a remote repository
 * @param repo_url a git@ repository URL.
 * @param pattern a matching pattern for the branch list. Only return matching branches
 *
 * @return a list of branch names.  Removes the leading ref path
 *
 * Requires SSH_AGENT to have set a key for access to the remote repository
 */
def get_remote_branches(repo_url, pattern="") {

    branch_text = sh(
        returnStdout: true,
        script: [
            "git ls-remote ${repo_url} ${pattern}",
            "awk '{print \$2}'",
            "cut -d/ -f3"
        ].join(" | ")
    ).trim()

    return branch_text.split()
}

/**
 * Retrive a list of release numbers from the OCP remote repository
 * @param repo_url a git@ repository URL.
 * @return a list of OSE release numbers.
 *
 * Get the branch names beginning with 'enterprise-'.
 * Extract the release number string from each branch release name
 * Sort in version order (compare fields as integers, not strings)
 * Requires SSH_AGENT to have set a key for access to the remote repository
 */
def get_releases(repo_url) {
    // too clever: chain - get branch names, remove prefix, suffix
    branches = get_remote_branches(repo_url, 'enterprise-*')
    r = branches.collect { it - 'enterprise-' }.findAll { it =~ /^\d+((\.\d+)*)$/ }
    // and sort
    z = sort_versions(r)
    return z
}

@NonCPS // because sorting in-line in Jenkins requires NonCPS all the way out
def sort_versions(v_in) {
    v_out = v_in.sort{a, b -> return cmp_version(a, b)}
}

/**
 * Compare two version strings
 * These are dot separated lists of numbers.  Each field is compared to the matching field numerically
 * @param v0 a version string
 * @param v1 a second version string
 * @return 0 if the versions are equal.  1 if v0 > v1, -1 if v0 < v1
 *
 * If two strings have different numbers of fields, the missing fields are padded with 0s
 * Two versions are equal if all fields are equal
 */
@NonCPS
def cmp_version(String v0, String v1) {
    // compare two version strings.
    // return:
    //   v0 < v1: -1
    //   v0 > v1:  1
    //   v0 = v1:  0

    // split both into arrays on dots (.)
    try {
        a0 = v0.tokenize('.').collect { it as int }
        a1 = v1.tokenize('.').collect { it as int }
    } catch (convert_error) {
        error("Invalid version strings: ${v0} or ${v1} - ${convert_error}")
    }

    // extend both to 3 fields with zeros if needed
    while (a0.size() < 3) { a0 << 0 }
    while (a1.size() < 3) { a1 << 0 }

    // zip these two together for comparison
    // major.minor.revision
    mmr = [a0, a1].transpose()

    // if any pair do not match, return the result
    for (field in mmr) {
        t = field[0].compareTo(field[1])
        if (t != 0) { return t }
    }
    return 0
}

/**
 * Test if two version strings are equivalent
 * @param v0 a dot separated version string
 * @param v1 a dot separated version string
 * @return true if versions are equal.  False otherwise
 *
 * If two strings have different numbers of fields, the missing fields are padded with 0s
 * Two versions are equal if all fields are equal
 */
//@NonCPS
def eq_version(String v0, String v1) {
    // determine if two versions are the same
    // return:
    //   v0 == v1: true
    //   v0 != v1: false
    return cmp_version(v0, v1) == 0
}

/**
 * Determine the "build mode" based on the requested version, the version on HEAD of the master branch
 * and the versions found in the release branch list
 *
 * @param build_version a version string.  The version to be built
 * @param master_version a version string. The version on the master branch at HEAD
 * @param releases an array of version strings.  Each version string is from a release branch name
 * @return string the "build mode" to use when creating the local workspaces for OCP builds
 *
 * online:int: build from master
 * pre-release: build on release branch, merge master and upstream master before build
 * release: build from release branch
 *
 * NOTE: Must build either from master HEAD or an existing release branch. A build version which is not one of these
 * is invalid
 */
def auto_mode(build_version, master_version, releases) {
    // Conditions:
    //   BUILD_VERSION == master_version
    //   BUILD_VERSION in releases
    //
    //                |  BUILD_VERSION in releases
    // --------------------------------------------
    // build = master |   true      |   false     |
    // --------------------------------------------
    //      true      | pre-release |    online:int      |
    // -------------------------------------------
    //      false     |   release   |     X       |
    // -------------------------------------------
    // non-string map keys require parens during definition
    mode_table = [
        (true):  [ (true): "pre-release", (false): "online:int" ],
        (false): [ (true): "release",     (false): null  ]
    ]

    build_is_master = eq_version(build_version, master_version)
    build_has_release_branch = releases.contains(build_version)
    mode = mode_table[build_is_master][build_has_release_branch]

    if (mode == null) {
        error("""
invalid mode build != master and no release branch
  BUILD_VERSION: ${build_version}
  MASTER_VERSION: ${master_version}
  RELEASES: ${releases}
""")
    }
    return mode
}

def major_minor(version) {
    return version.tokenize('.')[0..1].join('.')
}

// set the repo and branch information for each mode and build version
// NOTE: here "origin" refers to the git reference, not to OpenShift Origin
def get_branch_names(mode, build_version) {
    // INPUTS:
    //   :param: mode - a string indicating which branches to build from
    //   :param: build_version - a version string used to compose the branch names
    //   :return: a map containing the source origin and upstream branch names

    switch(mode) {
        case "online:int":
            branch_names = ['origin': "master", 'upstream': "master"]
            break

        case "online:stg":
            branch_names = ['origin': "stage", 'upstream': "stage"]
            break

        case "pre-release":
            branch_names = ['origin': "enterprise-${build_version}", 'upstream': "release-${build_version}"]
            break

        case "release":
            branch_names = ['origin': "enterprise-${build_version}", 'upstream': null]
            break
    }

    return branch_names
}

//
// Create a new version string based on the build mode
//
//@NonCPS
def new_version(mode, version_string, release_string) {

    // version and release are arrays of dot-seprated decimals
    version = version_string.tokenize('.').collect { it.toInteger() }
    release = release_string.tokenize('.').collect { it.toInteger() }

    // stage and int:
    //   version field is N.N.N unchanged
    //   release field is 0.I.S to differentiate builds
    //

    // pre-release and release:
    //
    //   version field is N.{N+1}
    //   release field is 1

    // pad release to 3 fields
    while (version.size() < 3) { version += 0 }
    while (release.size() < 3) { release += 0 }

    switch (mode) {
        case 'online:int':
            release[1]++
            release[2] = 0
            break
        case 'online:stg':
            release[2]++
            break
        case 'release':
        case 'pre-release':
            version[-1]++ // this puts a colon in the final field
            release = [1]
            break
    }

    return [
        'version': version.each{ it.toString() }.join('.'),
        'release': release.each{ it.toString() }.join('.')
    ]
}

// predicate: build with the web-server-console source tree?
def use_web_console_server(version_string) {
    // the web console server was introduced with version 3.9
    return cmp_version(version_string, "3.9") >= 0
}

// get a list of branches from a remote github

def survey_banner(build_version, build_mode, branches, version) {
    banner = """
------------------------------------------------------------------------------
BUILD_VERSION: ${build_version}
BUILD_MODE   : ${build_mode}

SOURCE BRANCHES - 
  origin(*)  : ${branches['origin']}   (* git remote 'origin')
  upstream   : ${branches['upstream']}

RPM_VERSION  : ${version['version']}-${version['release']}
------------------------------------------------------------------------------
""".trim()

    echo banner
}

// ===========================================================================
//
// REPO CONTROL FUNCTIONS
//
// ===========================================================================




// ===========================================================================
//
// MAIN
//
// ===========================================================================

node(TARGET_NODE) {
    checkout scm
    
    token_file_name = GITHUB_TOKEN_FILENAME
    github_token = read_oauth_token(token_file_name)
    //
    // Given a version number to build, determmine how to configure the
    // local git workspacexz
    //
    stage("survey") {
        echo "BEGIN STAGE: survey"

        if (github_token == "") {
            error("failed to read file $token_file_name")
        }

        // 
        master_rpm_spec = get_single_file(
            GITHUB_OWNER, 'ose', 'origin.spec', github_token
        )
        master_version = extract_rpm_version(master_rpm_spec)
        //master_release = extract_rpm_release(master_rpm_spec)
        
        // release versions only use the first two fields for branch naming
        // the final field is a build number
        master_major_minor = major_minor(master_version)

        on_master = eq_version(BUILD_VERSION, major_minor(master_version)) ?
            "": "not "
        echo "build version ${BUILD_VERSION} is ${on_master}on master"

        sshagent([SSH_KEY_ID]) {
            // git@github access requires SSH authentication
            releases = get_releases("git@github.com:${GITHUB_OWNER}/ose")
        }
        
        if (BUILD_VERSION in releases) {
            echo "build version is a release"
        }

        mode = auto_mode(BUILD_VERSION, master_major_minor, releases)

        echo "Build mode: ${mode}"

        // define build branches for origin and upstream remotes
        remote_branch_names = get_branch_names(mode, BUILD_VERSION)
        echo "Branch Names: ${remote_branch_names}"
        
        // define new version/release for openshift packages

        branch_rpm_spec = get_single_file(
            GITHUB_OWNER, 'ose', 'origin.spec', github_token, remote_branch_names['origin']
        )
        branch_version = extract_rpm_version(branch_rpm_spec)
        branch_release = extract_rpm_release(branch_rpm_spec)
        //branch_major_minor = major_minor(branch_version)

        new_build_version = new_version(mode, branch_version, branch_release)

        echo "new build version/release: ${new_build_version}"

        //
        //
        //
        survey_banner(BUILD_VERSION, mode, remote_branch_names, new_build_version)

        // The output result for the next stage is the BUILD_CONFIG
        BUILD_CONFIG = [
            version: BUILD_VERSION,
            mode: mode,
            branches: remote_branch_names,
            rpm_version: new_build_version
        ]
        // SSH_KEY_ID: ??
        // github_oauth_token ??

        echo "END STAGE: survey"
    }

    stage('prepare ose workspace') {
        echo "BEGIN STAGE: prepare ose workspace"
        // clone the ose github repo and configure for the requested build


        // for releases, there is no merge.  Just clone the single branch/layer
        
        // for dev, add the upstream for OpenShift Origin

        // 
        echo "END STAGE: prepare ose workspace"
    }
}
