//
// Create the repos needed to build OpenShift
//
// Expose properties for a parameterized build
properties(
    [
        buildDiscarder(
            logRotator(
                artifactDaysToKeepStr: '',
                artifactNumToKeepStr: '',
                daysToKeepStr: '',
                numToKeepStr: '1000')),
        [
            $class: 'ParametersDefinitionProperty',
            parameterDefinitions: [
                [
                    name: 'TARGET_NODE',
                    description: 'Jenkins agent node',
                    $class: 'hudson.model.StringParameterDefinition',
                    defaultValue: 'openshift-build-1'
                ],
            ]
        ],
        disableConcurrentBuilds()
    ]
)

secret_dir_name = '.'
secret_dir = new File(secret_dir_name)

echo "cws = ${secret_dir.listFiles()}"

token_file_name = '/jenkins/agent/.ssh/github_token.txt'
token_file = new File(token_file_name)
//github_token = token_file.exists() ? token_file.getText().trim() : ""
github_token = token_file.getText().trim()

// get a single file from a github repo

def get_single_file(owner, repo_name, file_name, repo_token) {
    // Get a single file from a Github repository.

    auth_header = "Authorization: token " + repo_token
    file_url = "https://api.github.com/repos/${owner}/${repo_name}/contents/${file_name}"
    accept_header = "Accept: application/vnd.github.v3.raw"
    query = "curl --silent -H '${auth_header}' -H '${accept_header}' -L ${file_url}"
    content = sh(
	      returnStdout: true,
        script: query
    )
    return content
}

def get_remote_branches() {
    return []
}

// get a list of branches from a remote github

node(TARGET_NODE) {

    //
    // Given a version number to build, determmine how to configure the
    // local git workspacexz
    //
    stage("survey") {
        echo "BEGIN STAGE: survey"

        if (github_token == "") {
            error("failed to read file $token_file_name")
        }

        // 
        master_rpm_spec = get_single_file(
            'markllama', 'ose', 'origin.spec', github_token
        )

        echo master_rpm_spec
        
        //
        branches = get_remote_branches()

        echo "END STAGE: survey"
    }
}
