// Test OCP auto mode
properties(
    [
        buildDiscarder(
            logRotator(
                artifactDaysToKeepStr: '5',
                artifactNumToKeepStr: '10',
                daysToKeepStr: '5',
                numToKeepStr: '10')),
        [
            $class: 'ParametersDefinitionProperty',
            parameterDefinitions: [
                [
                    name: 'TARGET_NODE',
                    description: 'Jenkins agent node',
                    $class: 'hudson.model.StringParameterDefinition',
                    defaultValue: 'container'
                ],
                [
                    name: 'BUILD_VERSION',
                    description: 'The version to try to build',
                    $class: 'hudson.model.StringParameterDefinition',
                    defaultValue: 'latest'
                ],
                [
                    name: 'SSH_KEY_ID',
                    description: 'SSH credential id to use',
                    $class: 'hudson.model.ChoiceParameterDefinition',
                    choices: [
                        "markllama-aos-cd-bot",
                        "markllama"
                    ].join("\n"),
                    defaultValue: 'markllama-aos-cd-bot'
                ],
            ]
        ],
        disableConcurrentBuilds()
    ]
)

def get_branches(repo_url, pattern="") {

    branch_text = sh(
        returnStdout: true,
        script: [
            "git ls-remote ${repo_url} ${pattern}",
            "awk '{print \$2}'",
            "cut -d/ -f3"
        ].join(" | ")
    )

    return branch_text.split("\n")
}


//
//
//
def get_releases(repo_url) {
    // too clever: chain - get branch names, remove prefix, suffix
    r = get_branches(repo_url, "enterprise-*").collect { it - "enterprise-" }.findAll { it =~ /^\d+((\.\d+)*)$/ }

    // and sort
    z = sort_versions(r)
    return z
}

def get_single_file(owner, repo_name, file_name, repo_token) {
    // Get a single file from a Github repository.

    auth_header = "Authorization: token " + repo_token
    file_url = "https://api.github.com/repos/${owner}/${repo_name}/contents/${file_name}"
    accept_header = "Accept: application/vnd.github.v3.raw"

    query = "curl --silent -H '${auth_header}' -H '${accept_header}' -L ${file_url}"
    content = sh(
	      returnStdout: true,
        script: query
    )

    return content
}

def checkout_repo(repo_url, repo_path) {
    sh(
        "git clone ${repo_url} ${repo_path}"
    )
}

// Matcher is not serializable; use NonCPS
@NonCPS
def extract_rpm_version( spec_content ) {
    def ver_matcher = spec_content =~ /Version:\s*([.0-9]+)/
    if ( ! ver_matcher ) { // Groovy treats matcher as boolean in this context
        error( "Unable to extract Version field from RPM spec" )
    }
    return ver_matcher[0][1]
}


@NonCPS // because sorting in-line in Jenkins requires NonCPS all the way out
def sort_versions(v_in) {
    v_out = v_in.sort{a, b -> return cmp_version(a, b)}
}

@NonCPS
def cmp_version(String v0, String v1) {
    // compare two version strings.
    // return:
    //   v0 < v1: -1
    //   v0 > v1:  1
    //   v0 = v1:  0

    // split both into arrays on dots (.)
    try {
        a0 = v0.tokenize('.').collect { it as int }
        a1 = v1.tokenize('.').collect { it as int }
    } catch (convert_error) {
        error("Invalid version strings: ${v0} or ${v1} - ${convert_error}")
    }

    // extend both to 3 fields with zeros if needed
    while (a0.size() < 3) { a0 << 0 }
    while (a1.size() < 3) { a1 << 0 }

    // zip these two together for comparison
    // major.minor.revision
    mmr = [a0, a1].transpose()

    // if any pair do not match, return the result
    for (field in mmr) {
        t = field[0].compareTo(field[1])
        if (t != 0) { return t }
    }
    return 0
}

@NonCPS
def eq_version(String v0, String v1) {
    // determine if two versions are the same
    // return:
    //   v0 == v1: true
    //   v0 != v1: false
    return cmp_version(v0, v1) == 0
}


@NonCPS
def test_sort() {
 a = ['3.10', '2.9', '3.1', '3.5.1']


    echo("comparing ${a[0]} to ${a[1]}: ${cmp_version(a[0], a[1])}")
    //println(" a = ${a}")
    //a.sort()

    String[] b = a.sort{f0, f1 -> return cmp_version(f0, f1)}
    
    echo(" a = ${a}")
    echo(" b = ${b}")

    x = [3, 5, 1, 2, 7]
    echo(" x = ${x}")
    y = x.sort()

    echo(" x = ${x}")
    echo(" y = ${y}")

    return [x, y]
}

node(TARGET_NODE) {

    ose_repo_url = "git@github.com:markllama/ose.git"

    github_auth_token = readFile("/jenkins/agent/.ssh/github-token-oauth.txt").trim()
    
    stage("startup") {
        echo "building ${BUILD_VERSION}"
    }


    // stage("test version sort") {
    //     a = ['3.10', '2.9', '3.1', '3.5.1']


    //     echo("comparing ${a[0]} to ${a[1]}: ${cmp_version(a[0], a[1])}")
    //     //println(" a = ${a}")
    //     //a.sort()

    //     String[] b = a.sort{f0, f1 -> return cmp_version(f0, f1)}
        
    //     echo(" a = ${a}")
    //     echo(" b = ${b}")

    //     x = [3, 5, 1, 2, 7]
    //     echo(" x = ${x}")
    //     y = x.sort{ 0 }

    //     echo(" x = ${x}")
    //     echo(" y = ${y}")

    //     echo "---- try again ----"

    //     m = test_sort()

    //     echo "${m}"
    //     //echo "${m[1]}"        
    // }

    
    sshagent([SSH_KEY_ID]) {
        stage("get release branches") {
            branches = get_branches(ose_repo_url, "enterprise-*")
            echo "found branches: ${branches}"
        }

        stage("get release versions") {
            releases = get_releases(ose_repo_url)
            echo "found releases: ${releases}"
        }
        
        stage("get master spec file") {
            spec_file = get_single_file("openshift", "ose", "origin.spec", github_auth_token)
            echo "Spec file size: ${spec_file.size()}"
        }

        stage("extract version-release") {
            master_version = extract_rpm_version(spec_file)
            echo "Master version: ${master_version}"
        }
            
        stage("select mode") {
            echo "Selecting mode - build version = ${BUILD_VERSION}"

            if (BUILD_VERSION == "latest") {

                // get the first two fields of the master version
                fields = master_version.tokenize(".")
                echo "Version = ${master_version}, Fields = ${fields}"
                // requires script security whitelist for static method getAt() on arrays 
                BUILD_VERSION = fields[0,1].join('.')
            }

            echo "Building ${BUILD_VERSION}"

            // assume auto mode
            //
            // Conditions:
            //   BUILD_VERSION == master_version
            //   BUILD_VERSION in releases
            //
            //                |  BUILD_VERSION in releases
            // --------------------------------------------
            // build = master |   true      |   false     |
            // --------------------------------------------
            //      true      | pre-release |    dev      |
            // -------------------------------------------
            //      false     |   release   |     X       |
            // -------------------------------------------
            // non-string map keys require parens during definition
            mode_table = [
                (true):  [ (true): "pre-release", (false): "dev" ],
                (false): [ (true): "release",     (false): null  ]
            ]

            build_is_master = eq_version(BUILD_VERSION, master_version)
            build_is_release = releases.contains(BUILD_VERSION)

            echo "build_is_master : ${build_is_master}"
            echo "build_is_release: ${build_is_release}"
            mode = mode_table[build_is_master][build_is_release]

            if (mode == null) {
                error("Invalid build: no build branch for version ${BUILD_VERSION}")
            }

            echo "Build mode: ${mode}"
        }
        // get version and release
        //stage("checkout repo") {
        //    checkout_repo(
        //        ose_repo_url,
        //        "ose"
        //    )
        //}
    }
}
